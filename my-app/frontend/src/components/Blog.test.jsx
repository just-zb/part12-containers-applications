import { render, screen } from '@testing-library/react'import userEvent from '@testing-library/user-event'import Blog from './Blog'test('renders content', () => {    const blog = {        id: 1,        title: 'Component testing is done with react-testing-library',        author: 'Robert C. Martin',        url: 'https://testing-library.com/docs/example-react',        likes: 0,    }    const deleteBlog = vi.fn()    const deleteVisible = { display: 'none' }    const { container } = render(<Blog blog={blog} deleteBlog={deleteBlog} deleteVisible={deleteVisible} />)    screen.debug()    const div = container.querySelector('.blog')    screen.debug(div)    expect(div).toBeDefined()    expect(div).toHaveTextContent('Component testing is done with react-testing-library')    expect(div).toHaveTextContent('Robert C. Martin')    expect(div).not.toHaveTextContent('https://testing-library.com/docs/example-react')    expect(div).not.toHaveTextContent('0')})test('clicking the button shows url and likes', async () => {    const blog = {        id: 1,        title: 'Component testing is done with react-testing-library',        author: 'Robert C. Martin',        url: 'https://testing-library.com/docs/example-react',        likes: 10,    }    const deleteBlog = vi.fn()    const deleteVisible = { display: 'none' }    const { container } = render(<Blog blog={blog} deleteBlog={deleteBlog} deleteVisible={deleteVisible} />)    const user = userEvent.setup()    const button = screen.getByText('view')    await user.click(button)    const div = container.querySelector('.blog')    expect(div).toHaveTextContent('https://testing-library.com/docs/example-react')    expect(div).toHaveTextContent('likes: 10')})test('clicking the like button twice calls event handler twice', async () => {    const blog = {        id: 1,        title: 'Component testing is done with react-testing-library',        author: 'Robert C. Martin',        url: 'https://testing-library.com/docs/example-react',        likes: 10,    }    const deleteBlog = vi.fn()    const updateBlog = vi.fn()    const deleteVisible = { display: 'none' }    render(<Blog blog={blog} deleteBlog={deleteBlog} updateBlog={updateBlog} deleteVisible={deleteVisible} />)    const user = userEvent.setup()    const button = screen.getByText('view')    await user.click(button)    const likeButton = screen.getByText('like')    await user.click(likeButton)    await user.click(likeButton)    expect(updateBlog).toHaveBeenCalledTimes(2)})